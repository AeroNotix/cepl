;; More 3D - Multiple objects rotating

(defparameter *resolution* (v! 640 480))
(defparameter *entity* nil)
(defparameter *loop* 0.0)
(defparameter *camera* (ccam:make-camera *resolution*))

(defglstruct vert-data 
  (position :vec3)
  (color :vec4))

(defpipeline gpu-draw ((vert vert-data) &uniform (model-clip :mat4))
  (:vertex (setf gl-position (* model-clip (v! (vert-data-position vert) 1.0)))
           (out (interp-color :smooth) (vert-data-color vert)))
  (:fragment (out output-color interp-color))
  (:post-compile (reshape *resolution*)))

(defclass entity ()
  ((e-stream :initform nil :initarg :e-stream :accessor e-stream)
   (position :initform (v! 0 0 -5) :initarg :pos :accessor pos)
   (rotation :initform (v! 0 0 0) :initarg :rot :accessor rot)
   (scale :initform (v! 1 1 1) :initarg :scale :accessor scale)))

(defun init () 
  (let* ((verts (make-gpu-array `((,(v! +1  +1  +1)  ,(v! 0  1  0  1)) 
                                  (,(v! -1  -1  +1)  ,(v! 0  0  1  1))
                                  (,(v! -1  +1  -1)  ,(v! 1  0  0  1))
                                  (,(v! +1  -1  -1)  ,(v! 0.5  0.5  0  1))
                                  (,(v! -1  -1  -1)  ,(v! 0  1  0  1)) 
                                  (,(v! +1  +1  -1)  ,(v! 0  0  1  1))
                                  (,(v! +1  -1  +1)  ,(v! 1  0  0  1))
                                  (,(v! -1  +1  +1)  ,(v! 0.5  0.5  0  1)))
                                :element-type 'vert-data :dimensions 8))
         (indicies (make-gpu-array '(0 1 2   1 0 3   2 3 0   3 2 1
                                     5 4 6   4 5 7   7 6 4   6 7 5)
                    :dimensions 24 :element-type :unsigned-short))
         (stream (make-vertex-stream verts :index-array indicies)))
    (setf *entity* (make-instance 'entity :e-stream stream)))
  ;;set options
  (cgl:clear-color 0.0 0.0 0.0 0.0)
  (gl:enable :cull-face)
  (gl:cull-face :back)
  (gl:front-face :cw)
  (gl:enable :depth-test)
  (gl:depth-mask :true)
  (gl:depth-func :lequal)
  (gl:depth-range 0.0 1.0)
  (gl:enable :depth-clamp))

(defun model->clip (entity)
  (reduce #'m4:m* (list (ccam:cam->clip *camera*)
                        (ccam:world->cam *camera*)
                        (m4:translation (pos entity))
                        (m4:rotation-from-euler (rot entity))
                        (m4:scale (scale entity)))))

(defun draw ()
  (incf *loop* 0.01)
  (cgl:clear-depth 1.0)
  (cgl:clear :color-buffer-bit :depth-buffer-bit)
  (setf (rot *entity*) (v:+ (rot *entity*) (v! 0.004 0.004 0)))
  (gpu-draw (e-stream *entity*) :model-clip (model->clip *entity*))
  (gl:flush)
  (cgl:update-display))

(defun reshape (frame-size-vec2)
  (setf (ccam:frame-size *camera*) frame-size-vec2)
  (cgl:viewport 0 0 (aref frame-size-vec2 0) (aref frame-size-vec2 1)))

(let ((running nil))
  (defun run-demo () 
    (init)
    (reshape *resolution*)  
    (setf running t)
    (loop :while running :do
       (case-events (event)
         (:quit () (setf running nil))
         (:windowevent (:event e :data1 x :data2 y)
                       (when (eql e sdl2-ffi:+sdl-windowevent-resized+)
                         (reshape (v! x y)))))
       (cepl-utils:update-swank)
       (continuable (draw))))
  (defun stop-demo () (setf running nil)))
