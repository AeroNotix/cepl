#
;;declarative-val

(with-dvalue (test)
  (loop :for entity :in entities :do
     (dbind (pos entity) (v! (sin (+ i test)) (cos (+ i test))))))

;; this could be hard. Do we bind the the lexical entity or the value
;; it really should be the value but place isnt a 'real' object just 
;; a semantic effect
(drelease (pos entity))

;; dbind should return a handle to the call back then you can 

(with-dvalue (dtest)
  (loop :for entity :in entities :do
     (setf (slot entity) (dbind (pos entity) (v! (sin (+ i dtest))
                                                 (cos (+ i dtest)))))))

;; and then entity's slot will hold a key
;; then you can do this 
(drelease (slot entity) dtest)

;; that should be it

;; wait why do we need with-dvalue? because otherwise we have no way to find
;; which form in the dbind is important



--------------------------------------------------------------
old stuff

(defun walk-dform (dvals body)
  (cond ((null body) nil)
        ((and (listp body) (eq 'dbind (first body))) (transform-dbind body dvals))
        ((listp body) (cons (walk-dform dvals (first body)) (walk-dform dvals (rest body))))
        (t body)))

(defun transform-dbind (body dvals)
  (destructuring-bind (place form) (rest body)
    (let ((dvals (loop :for v :in dvals :if (utils:find-in-tree v form)
                    :collect v))
          (form (loop :for dval in dvals :do
                   (setf form (subst `(value ,dval) dval form))
                   :finally (return form))))
      `(let ((setter (let (,@(loop for dval in dvals collect
                                  (list dval dval)))                       
                       (lambda () ,form))))
         (setf ,place ,form)
         (list ,@(loop :for dval :in dvals :collect 
                    `(let ((key (incf (count ,dval))))
                       (setf (gethash key (bound ,dval)) setter)
                       key)))))))


(defmacro with-dvalue ((&rest dvals) &body body)
  `(progn ,@(walk-dform dvals body)))