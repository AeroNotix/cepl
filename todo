* make-gpu-array with list is failing 
  ok at really odd  times so is from gl-array... this is odd
  seems to be when created using defparameter...so it doesnt like
  top level for some reason?

* (defpipeline? draw-ortho ((data vdata) &uniform (offset :vec2))
   (:vertex (setf gl-position (+ (pos data) (vec4 offset 0.0 0.0)))
            (out (the-color :smooth) (color data)))
   (:fragment (out final-color the-color)))

  as you can see above, the type of 'data' is vdata. But we dont 
  have to quote it... is that lispy? Yes, that is inline withg 
  defamethod.

* We need a representation of frame buffers...or whatever those 
   things are! I kind of feel that running a shader should return
   one. At the very least we will need it later for targets and
   for defining feedback within pipelines.

* add set culling? combined enabling, setting winding-order and
  cull-face in one move.

* swizzle is named incorrectly, its really a generic make-vector4

* stream could have base offset so draw-element-base thingy works

* enable is odd.... can things be made better by spinning out 
  it's functionality to other functions?

* uniform buffer objects

* deletion of things in pools in cepl-gl

* :triangle, :lines, etc are called the render-mode or primitive
   do our arg names reflect this?

* bindbufferrange - read about it

* work through the glossaries of arc-synth and check args names
   in cepl-gl for conformance

* index gpu-arrays could be populated using vectors...as long as each
   is kept in order things will work e.g. '(1 2 3 4) == '(#(1 2) #(3 4))